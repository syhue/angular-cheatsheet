{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Angular Documentation Reach me at: GitHub , Personal Website , LinkedIn Angular CLI Commands Beginning ng new project-name - Create a new project. ng serve --open - Start the live-reloading docs server and open in a browser. ng update - Updates your application and its dependencies. ng add @angular/material - Install angular material Coding ng generate --help - Showing the list that can be generated. ng add --help - Showing the list that can be added. Deployment ng build - Build the documentation site. npm install -g now - Install now.sh now login - For first time user to use now.sh. now - Deploy your project. Angular Debug in TypeScript/JavaScript debugger console.log() Calling API without Observable #1 (Get) #Api.service.ts export class service-name { route = 'https://syhue/' constructor( private http: HttpClient, ) {} getData() { this.http.get(this.route + 'CountryRegion', {params: params}) .pipe.map(data => { return data.Result; }) } } #component.ts export class component-name implements OnInit { constructor( private apiService: ApiService, ) ngOnInit() { } getData() { this.apiService.getData() .subscribe((data => { return data; })) } } Calling API without Observable #2 (Post, Put) updateProfilePhoto(file: any) { const formsData = new FormData(); # FormData() is a built in function. formData.append(\"file\", file); return this.http.post(this.route + \"ProfilePhoto\", formData) # In Postman, the body column need a file } updateProfile(body: any, file:any) { return this.http.put(this.route + \"Profile\", body).pipe(mergeMap(result => { let observables: Observable<any>[] = [of({})]; if (file) { observables = observables.concat(this.updateProfiile(file.file)); } return forkJoin(...observables); })); } Calling API with Observable #1 (Get) # service.ts getData(id: number, skip: number, take: number): Observable<Data[]>{ const params: any = { first-param: userId, second-param: skip.**toString()**, # What is toString()? third-param: take.toString(), } return this.http.get<DataModel[]>(this.route + 'MiddlePartOfURL', { params: params }) .pipe(map(models => { return models.map(model => new MesraPointHistory(model)); })) } # data-model.ts export class DataModel { PointId: number; CreateDate: string; Point: number; Remark: string; Title: string; } # data.ts import { DataModel } from \"./data-model\"; import { Moment } from \"moment\"; import { BaseClass } from \"../base-class\"; export class Data extends BaseClass { id: number; createDate: Moment; point: number; remark: string; title: string; constructor( model: DataModel ) { super(); this.id = model.PointId; this.createDate = this.toMoment(model.CreateDate); this.point = model.Point; this.remark = model.Remark; this.title = model.Title; } } # data.component.ts this.loading = true; getData(): void { const skip = this.array.length; const take = 10; this.userService.getData(this.userId, skip, take).subscribe( (data: Data[]) => { this.array = this.array.concat(data); if (data.length < take) { this.endOfList = true; } }, () => { this.endOfList = true; } ) .add(() => { this.loading = false }); } Calling API with Observable #2 (Get) getUser(reload = false): Observable <User> { if (!reload && this.currentUser) return of(this.currentUser); # of() # import { of } from 'rxjs'; return this.http.get<UserModel>(this.route + \"Profile\") .pipe(map(model => { this.currentUser = new User(model); return this.currentUser; })); } Model Mapping to provide a translation layer between server model and data model # service.ts getData(): Observable<Example[]> { return this.http.get<**ExampleModel**[]>(this.atozRoute + \"GetData\") .pipe(map(model => model.map(m => new Alphabet(m)))); # the translation layer } # example.ts import { ExampleModel } from \"./example-model\"; export class Example { id: number; title: string; selectionTitle: string; description: string; constructor(model: ExampleModel) { this.id = model.Id; this.title = model.Title; this.selectionTitle = model.SelectionTitle; this.description = model.Description; } } # example-model.ts export class ExampleModel { Id: number; Title: string; SelectionTitle: string; Description: string; } Routing { path: 'profile/web-dev', component: WebDevComponent , data: { title: 'Web Development'} }, # app-routing.module.ts this.router.navigate(['wed-dev']); # profile.component.ts [routerLink]=\"'web-dev/'\" # profile.component.html Call nested object from API <div *ngFor='let item of items'> {{ item.something }} </div> Perform event click in typescript click.this.getAccessment # click it will direct to this.get.Accessment. NgbModal addPopupCard() { const option = { size: 'lg', centered: true } as NgbModalOptions; this.modalService.open(any-component, option); } Attribute Directive: NgClass Directive ngClass Directive: The ngClass directive is used to add or remove CSS classes to an HTML element. # login.component.html <form class=\"loginForm\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [ngClass]=\"{'showFormError': showFormError}\"> </form> # login.component.ts submit(): void { if (!this.form.valid) { this.showFormError = true; return; } # login.component.scss .showFormError { input.ng-invalid { border-color: red !important; } } JavaScript Built In Functions map const array1 = [1, 4, 9, 16]; # pass a function to map const map1 = array1.map(x => x * 3); console.log(map1); # expected output: Array [3, 12, 27, 48] Immediately Invoke Function Expression (IIFEs) # Part 1 (function(name) { var greeting = 'Hello'; console.log(greeting + ' ' + name); }('John')); # Part 2 function buildFunctions2() { var arr = []; for (var i = 0; i<3; i++) { arr.push( (function(j) return function() { console.log(j); }(i)) ) } } var fs2 = buildFunctions2(); fs2[0](); fs2[1](); fs2[2](); Closures function greet(whattosay) { return function(name) { console.log(whattosay + ' ' + name); } } greet('Hi')('Tony'); var sayHi = greet('Hi'); sayHi('Tony'); Rxjs function/of","title":"Angular Documentation"},{"location":"#angular-documentation","text":"Reach me at: GitHub , Personal Website , LinkedIn","title":"Angular Documentation"},{"location":"#angular-cli-commands","text":"","title":"Angular CLI Commands"},{"location":"#beginning","text":"ng new project-name - Create a new project. ng serve --open - Start the live-reloading docs server and open in a browser. ng update - Updates your application and its dependencies. ng add @angular/material - Install angular material","title":"Beginning"},{"location":"#coding","text":"ng generate --help - Showing the list that can be generated. ng add --help - Showing the list that can be added.","title":"Coding"},{"location":"#deployment","text":"ng build - Build the documentation site. npm install -g now - Install now.sh now login - For first time user to use now.sh. now - Deploy your project.","title":"Deployment"},{"location":"#angular","text":"","title":"Angular"},{"location":"#debug-in-typescriptjavascript","text":"debugger console.log()","title":"Debug in TypeScript/JavaScript"},{"location":"#calling-api-without-observable-1-get","text":"#Api.service.ts export class service-name { route = 'https://syhue/' constructor( private http: HttpClient, ) {} getData() { this.http.get(this.route + 'CountryRegion', {params: params}) .pipe.map(data => { return data.Result; }) } } #component.ts export class component-name implements OnInit { constructor( private apiService: ApiService, ) ngOnInit() { } getData() { this.apiService.getData() .subscribe((data => { return data; })) } }","title":"Calling API without Observable #1 (Get)"},{"location":"#calling-api-without-observable-2-post-put","text":"updateProfilePhoto(file: any) { const formsData = new FormData(); # FormData() is a built in function. formData.append(\"file\", file); return this.http.post(this.route + \"ProfilePhoto\", formData) # In Postman, the body column need a file } updateProfile(body: any, file:any) { return this.http.put(this.route + \"Profile\", body).pipe(mergeMap(result => { let observables: Observable<any>[] = [of({})]; if (file) { observables = observables.concat(this.updateProfiile(file.file)); } return forkJoin(...observables); })); }","title":"Calling API without Observable #2 (Post, Put)"},{"location":"#calling-api-with-observable-1-get","text":"# service.ts getData(id: number, skip: number, take: number): Observable<Data[]>{ const params: any = { first-param: userId, second-param: skip.**toString()**, # What is toString()? third-param: take.toString(), } return this.http.get<DataModel[]>(this.route + 'MiddlePartOfURL', { params: params }) .pipe(map(models => { return models.map(model => new MesraPointHistory(model)); })) } # data-model.ts export class DataModel { PointId: number; CreateDate: string; Point: number; Remark: string; Title: string; } # data.ts import { DataModel } from \"./data-model\"; import { Moment } from \"moment\"; import { BaseClass } from \"../base-class\"; export class Data extends BaseClass { id: number; createDate: Moment; point: number; remark: string; title: string; constructor( model: DataModel ) { super(); this.id = model.PointId; this.createDate = this.toMoment(model.CreateDate); this.point = model.Point; this.remark = model.Remark; this.title = model.Title; } } # data.component.ts this.loading = true; getData(): void { const skip = this.array.length; const take = 10; this.userService.getData(this.userId, skip, take).subscribe( (data: Data[]) => { this.array = this.array.concat(data); if (data.length < take) { this.endOfList = true; } }, () => { this.endOfList = true; } ) .add(() => { this.loading = false }); }","title":"Calling API with Observable #1 (Get)"},{"location":"#calling-api-with-observable-2-get","text":"getUser(reload = false): Observable <User> { if (!reload && this.currentUser) return of(this.currentUser); # of() # import { of } from 'rxjs'; return this.http.get<UserModel>(this.route + \"Profile\") .pipe(map(model => { this.currentUser = new User(model); return this.currentUser; })); }","title":"Calling API with Observable #2 (Get)"},{"location":"#model-mapping","text":"to provide a translation layer between server model and data model # service.ts getData(): Observable<Example[]> { return this.http.get<**ExampleModel**[]>(this.atozRoute + \"GetData\") .pipe(map(model => model.map(m => new Alphabet(m)))); # the translation layer } # example.ts import { ExampleModel } from \"./example-model\"; export class Example { id: number; title: string; selectionTitle: string; description: string; constructor(model: ExampleModel) { this.id = model.Id; this.title = model.Title; this.selectionTitle = model.SelectionTitle; this.description = model.Description; } } # example-model.ts export class ExampleModel { Id: number; Title: string; SelectionTitle: string; Description: string; }","title":"Model Mapping"},{"location":"#routing","text":"{ path: 'profile/web-dev', component: WebDevComponent , data: { title: 'Web Development'} }, # app-routing.module.ts this.router.navigate(['wed-dev']); # profile.component.ts [routerLink]=\"'web-dev/'\" # profile.component.html","title":"Routing"},{"location":"#call-nested-object-from-api","text":"<div *ngFor='let item of items'> {{ item.something }} </div>","title":"Call nested object from API"},{"location":"#perform-event-click-in-typescript","text":"click.this.getAccessment # click it will direct to this.get.Accessment.","title":"Perform event click in typescript"},{"location":"#ngbmodal","text":"addPopupCard() { const option = { size: 'lg', centered: true } as NgbModalOptions; this.modalService.open(any-component, option); }","title":"NgbModal"},{"location":"#attribute-directive-ngclass-directive","text":"ngClass Directive: The ngClass directive is used to add or remove CSS classes to an HTML element. # login.component.html <form class=\"loginForm\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [ngClass]=\"{'showFormError': showFormError}\"> </form> # login.component.ts submit(): void { if (!this.form.valid) { this.showFormError = true; return; } # login.component.scss .showFormError { input.ng-invalid { border-color: red !important; } }","title":"Attribute Directive: NgClass Directive"},{"location":"#javascript-built-in-functions","text":"","title":"JavaScript Built In Functions"},{"location":"#map","text":"const array1 = [1, 4, 9, 16]; # pass a function to map const map1 = array1.map(x => x * 3); console.log(map1); # expected output: Array [3, 12, 27, 48]","title":"map"},{"location":"#immediately-invoke-function-expression-iifes","text":"# Part 1 (function(name) { var greeting = 'Hello'; console.log(greeting + ' ' + name); }('John')); # Part 2 function buildFunctions2() { var arr = []; for (var i = 0; i<3; i++) { arr.push( (function(j) return function() { console.log(j); }(i)) ) } } var fs2 = buildFunctions2(); fs2[0](); fs2[1](); fs2[2]();","title":"Immediately Invoke Function Expression (IIFEs)"},{"location":"#closures","text":"function greet(whattosay) { return function(name) { console.log(whattosay + ' ' + name); } } greet('Hi')('Tony'); var sayHi = greet('Hi'); sayHi('Tony');","title":"Closures"},{"location":"#rxjs","text":"function/of","title":"Rxjs"}]}