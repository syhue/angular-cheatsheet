{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Angular Documentation Reach me at: GitHub , Personal Website , LinkedIn Angular CLI Commands Beginning ng new project-name - Create a new project. ng serve --open - Start the live-reloading docs server and open in a browser. ng update - Updates your application and its dependencies. ng add @angular/material - Install angular material Coding ng generate --help - Showing the list that can be generated. ng add --help - Showing the list that can be added. Deployment ng build - Build the documentation site. npm install -g now - Install now.sh now login - For first time user to use now.sh. now - Deploy your project. Angular Debug in TypeScript/JavaScript debugger console.log() Calling API without Observable #Api.service.ts export class service-name { route = 'https://syhue/' constructor( private http: HttpClient, ) {} getData() { this.http.get(this.route + 'CountryRegion', {params: params}) .pipe.map(data => { return data.Result; }) } } #component.ts export class component-name implements OnInit { constructor( private apiService: ApiService, ) ngOnInit() { } getData() { this.apiService.getData() .subscribe((data => { return data; })) } } Calling API with Observable #1 # service.ts getData(id: number, skip: number, take: number): Observable<Data[]>{ const params: any = { first-param: userId, second-param: skip.**toString()**, # What is toString()? third-param: take.toString(), } return this.http.get<DataModel[]>(this.route + 'MiddlePartOfURL', { params: params }) .pipe(map(models => { return models.map(model => new MesraPointHistory(model)); })) } # data-model.ts export class DataModel { PointId: number; CreateDate: string; Point: number; Remark: string; Title: string; } # data.ts import { DataModel } from \"./data-model\"; import { Moment } from \"moment\"; import { BaseClass } from \"../base-class\"; export class Data extends BaseClass { id: number; createDate: Moment; point: number; remark: string; title: string; constructor( model: DataModel ) { super(); this.id = model.PointId; this.createDate = this.toMoment(model.CreateDate); this.point = model.Point; this.remark = model.Remark; this.title = model.Title; } } # data.component.ts this.loading = true; getData(): void { const skip = this.array.length; const take = 10; this.userService.getData(this.userId, skip, take).subscribe( (data: Data[]) => { this.array = this.array.concat(data); if (data.length < take) { this.endOfList = true; } }, () => { this.endOfList = true; } ) .add(() => { this.loading = false }); } Calling API with Observable #2 getUser(reload = false): Observable <User> { if (!reload && this.currentUser) return of(this.currentUser); # of() # import { of } from 'rxjs'; return this.http.get<UserModel>(this.route + \"Profile\") .pipe(map(model => { this.currentUser = new User(model); return this.currentUser; })); } Routing { path: 'profile/web-dev', component: WebDevComponent , data: { title: 'Web Development'} }, # app-routing.module.ts this.router.navigate(['wed-dev']); # profile.component.ts [routerLink]=\"'web-dev/'\" # profile.component.html Call nested object from API <div *ngFor='let item of items'> {{ item.something }} </div> JavaScript Built In Functions map const array1 = [1, 4, 9, 16]; # pass a function to map const map1 = array1.map(x => x * 2); console.log(map1); # expected output: Array [2, 8, 18, 32] Rxjs function/of","title":"Angular Documentation"},{"location":"#angular-documentation","text":"Reach me at: GitHub , Personal Website , LinkedIn","title":"Angular Documentation"},{"location":"#angular-cli-commands","text":"","title":"Angular CLI Commands"},{"location":"#beginning","text":"ng new project-name - Create a new project. ng serve --open - Start the live-reloading docs server and open in a browser. ng update - Updates your application and its dependencies. ng add @angular/material - Install angular material","title":"Beginning"},{"location":"#coding","text":"ng generate --help - Showing the list that can be generated. ng add --help - Showing the list that can be added.","title":"Coding"},{"location":"#deployment","text":"ng build - Build the documentation site. npm install -g now - Install now.sh now login - For first time user to use now.sh. now - Deploy your project.","title":"Deployment"},{"location":"#angular","text":"","title":"Angular"},{"location":"#debug-in-typescriptjavascript","text":"debugger console.log()","title":"Debug in TypeScript/JavaScript"},{"location":"#calling-api-without-observable","text":"#Api.service.ts export class service-name { route = 'https://syhue/' constructor( private http: HttpClient, ) {} getData() { this.http.get(this.route + 'CountryRegion', {params: params}) .pipe.map(data => { return data.Result; }) } } #component.ts export class component-name implements OnInit { constructor( private apiService: ApiService, ) ngOnInit() { } getData() { this.apiService.getData() .subscribe((data => { return data; })) } }","title":"Calling API without Observable"},{"location":"#calling-api-with-observable-1","text":"# service.ts getData(id: number, skip: number, take: number): Observable<Data[]>{ const params: any = { first-param: userId, second-param: skip.**toString()**, # What is toString()? third-param: take.toString(), } return this.http.get<DataModel[]>(this.route + 'MiddlePartOfURL', { params: params }) .pipe(map(models => { return models.map(model => new MesraPointHistory(model)); })) } # data-model.ts export class DataModel { PointId: number; CreateDate: string; Point: number; Remark: string; Title: string; } # data.ts import { DataModel } from \"./data-model\"; import { Moment } from \"moment\"; import { BaseClass } from \"../base-class\"; export class Data extends BaseClass { id: number; createDate: Moment; point: number; remark: string; title: string; constructor( model: DataModel ) { super(); this.id = model.PointId; this.createDate = this.toMoment(model.CreateDate); this.point = model.Point; this.remark = model.Remark; this.title = model.Title; } } # data.component.ts this.loading = true; getData(): void { const skip = this.array.length; const take = 10; this.userService.getData(this.userId, skip, take).subscribe( (data: Data[]) => { this.array = this.array.concat(data); if (data.length < take) { this.endOfList = true; } }, () => { this.endOfList = true; } ) .add(() => { this.loading = false }); }","title":"Calling API with Observable #1"},{"location":"#calling-api-with-observable-2","text":"getUser(reload = false): Observable <User> { if (!reload && this.currentUser) return of(this.currentUser); # of() # import { of } from 'rxjs'; return this.http.get<UserModel>(this.route + \"Profile\") .pipe(map(model => { this.currentUser = new User(model); return this.currentUser; })); }","title":"Calling API with Observable #2"},{"location":"#routing","text":"{ path: 'profile/web-dev', component: WebDevComponent , data: { title: 'Web Development'} }, # app-routing.module.ts this.router.navigate(['wed-dev']); # profile.component.ts [routerLink]=\"'web-dev/'\" # profile.component.html","title":"Routing"},{"location":"#call-nested-object-from-api","text":"<div *ngFor='let item of items'> {{ item.something }} </div>","title":"Call nested object from API"},{"location":"#javascript-built-in-functions","text":"","title":"JavaScript Built In Functions"},{"location":"#map","text":"const array1 = [1, 4, 9, 16]; # pass a function to map const map1 = array1.map(x => x * 2); console.log(map1); # expected output: Array [2, 8, 18, 32]","title":"map"},{"location":"#rxjs","text":"function/of","title":"Rxjs"}]}